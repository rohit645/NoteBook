{"version":3,"sources":["services/Note.js","services/Login.js","components/Notification.js","components/Note.js","App.js","index.js"],"names":["token","console","log","request","axios","get","then","response","data","newObject","a","async","config","headers","authorization","post","newtoken","credentials","Notification","message","className","Note","note","changeimportance","showAll","label","important","content","onClick","id","Error","errorHandler","notehandler","setTimeout","App","useState","notes","setnotes","newNote","setnewNote","errorMessage","seterrorMessage","username","setusername","password","setpassword","user","setuser","useEffect","noteService","initialnotes","handleNoteChange","event","target","value","handleusername","handlepassword","addNote","preventDefault","ans","forEach","ele","toLowerCase","duplicate","Math","random","date","Date","toISOString","newData","concat","handleLogin","loginService","window","localStorage","setItem","JSON","stringify","onSubmit","type","name","onChange","map","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.488a3866.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst token = null\n\nconst setToken = (newtoken) => {\n\ttoken = `bearer ${newtoken}`\n}\n\nconst getAll = () => {\n\tconsole.log('Just now sent a GET request to server')\n\tconst request = (axios.get(baseUrl))\n\tconsole.log('fetching data from server')\n\treturn request.then(response => response.data)\n}\n\nconst create = async(newObject) => {\n\tconst config = {\n\t\theaders: { authorization: token }\n\t}\n\tconsole.log(`creating new object in server at ${baseUrl}`);\n\tconsole.log('config', config)\n\tconst response = await axios.post(baseUrl, newObject, config)\n\treturn response.data\n}\n\nconst update = (id, newObject) => {\n\tconsole.log('Sent the put request')\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\tconsole.log('successfully made the put request!!')\n\treturn request.then(response => response.data)\n}\n\nexport default {\n\tgetAll,\n\tcreate,\n\tupdate,\n\tsetToken\n}\n","import axios from 'axios'\nconst baseurl = '/api/login/' \n\nconst login = async credentials => {\n\tconst response =  await axios.post(baseurl, credentials)\n\treturn response.data\n} \n\nexport default { login }","import React from 'react'\n\nconst Notification = ({message}) => {\n    return(\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Note = ({note, changeimportance, showAll}) => {\n    const label = note.important ? 'make not important' : 'make important'\n    if(!showAll && !note.important) return null\n\n    return(\n\t<li className=\"note\">{note.content}\n\t    <button onClick = {() => changeimportance(note.id)}> {label} </button>\n\t</li>\n    )\t\n}\n\nexport default Note","import React, {useState, useEffect} from 'react'\nimport noteService from './services/Note'\nimport loginService from './services/Login'\nimport Notification from './components/Notification'\nimport Note from './components/Note'\n\nconst duplicate = (value, data) => {\n\tconsole.log('value', value);\n\tvar ans = false\n\tdata.forEach(ele => {\n            console.log('ele.content',ele.content)\n            if(ele.content.toLowerCase() === value.toLowerCase()) {\n                ans = true\n\t\t}\n\t});\n\treturn ans\n}\n\nconst Error = (content, errorHandler, notehandler) => {\n\terrorHandler(content)\n\tnotehandler('')\n\tsetTimeout(() => {\n\t\terrorHandler(null)\n\t}, 3000);\n}\n\nconst App = () => {\n\tconst [notes, setnotes] = useState([])\n\tconst [newNote, setnewNote] = useState('')\n\tconst [errorMessage, seterrorMessage] = useState('')\n\tconst [showAll, setshowAll] = useState(true)\n\tconst [username, setusername] = useState('')\n\tconst [password, setpassword] = useState('')\n\tconst [user, setuser] = useState(null)\n\t\n\tconst loginform = () => (\n\t\t<form onSubmit={handleLogin}>\n\t\t<div>\n\t\t\tusername \n\t\t\t<input \n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={username}\n\t\t\t\tname=\"username\"\n\t\t\t\tonChange={handleusername}\n\t\t\t/>\n\t\t</div>\n\t\t<div>\n\t\t\tpassword \n\t\t\t<input \n\t\t\t\ttype=\"password\" value={password} name=\"password\" onChange={handlepassword}\n\t\t\t/>\n\t\t</div>\n\t\t<button type=\"submit\"> \n\t\t\tlogin\n\t\t</button>\n\t</form>\n\t)\n\n\tconst notesform = () => (\n\t\t<div>\n\t\t\thello {user.username}\n\t\t\t<form onSubmit={addNote}>\n\t\t\t\t<h1>\n\t\t\t\t\tAdd new notes here!\n\t\t\t\t</h1>\n\t\t\t\t<input value={newNote} onChange={handleNoteChange} id=\"first\"/>\n\t\t\t\t<button type=\"submit\"> \n\t\t\t\t\tAdd\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</div>\n\t)\n\n\tconst fetchData = () => {\n\t\tconsole.log('inside fetch Data')\n\t\tnoteService\n\t\t.getAll()\n\t\t.then(initialnotes => {\n\t\t\tconsole.log('fetcing is finaly complete ugh!!')\n\t\t\tsetnotes(initialnotes)\n\t\t})\n\t}\n\tuseEffect(fetchData, [])\n\n\t// const userAlreadyLogged = () => {\n\t// \tconsole.log('checking if user is logged already or not?')\n\t// \tconst loggeduserJSON = window.localStorage.getItem('loggedNoteAppUser')\n\t// \tif(loggeduserJSON) {\n\t// \t\tconst user = JSON.parse(loggeduserJSON)\n\t// \t\tsetuser(user)\n\t// \t\tnoteService.setToken(user.token)\n\t// \t}\n\t// }\n\t// useEffect(userAlreadyLogged, [])\n\t\n\tconst handleNoteChange = (event) => {\n\t\tconsole.log('handle note change', newNote)\n\t\tsetnewNote(event.target.value)\n\t}\n\t\n\tconst handleusername = (event) => {\n\t\tconsole.log('handle username', username)\n\t\tsetusername(event.target.value)\n\t}\n\n\tconst handlepassword = (event) => {\n\t\tconsole.log('handle password',password)\n\t\tsetpassword(event.target.value)\n\t}\n\n\tconst addNote = (event) => {\n\t\tevent.preventDefault()\n\t\tif (duplicate(newNote, notes)) {\n\t\t\tconst message = `note with content \"${newNote}\" is duplicate`\n\t\t\tError(message, seterrorMessage, setnewNote)\n\t\t\treturn\n\t\t}\n\t\tconst newObject = {\n\t\t\tcontent: newNote,\n\t\t\timportant: Math.random() > 0.5,\n\t\t\tdate: new Date().toISOString()\n\t\t}\n\t\tnoteService\n\t\t.create(newObject)\n\t\t.then(newData => {\n\t\t\tconsole.log('post request has been made to server')\n\t\t\tsetnotes(notes.concat(newData))\n\t\t\tsetnewNote('')\n\t\t})\n\t}\n\t// this part handles login \n\tconst handleLogin = async (event) => {\n\t\tevent.preventDefault()\n\t\tconsole.log('started login process')\n\t\ttry {\n\t\t\tconst user = await loginService.login({username, password})\n\t\t\tconsole.log('user.token is', user.token)\n\t\t\twindow.localStorage.setItem(\n\t\t\t\t'loggedNoteAppUser', JSON.stringify(user)\n\t\t\t)\n\t\t\tnoteService.setToken(user.token)\n\t\t\tsetuser(user)\n\t\t\tsetusername('')\n\t\t\tsetpassword('')\n\t\t} catch(exception) {\n\t\t\tseterrorMessage('wrong credentials!')\n\t\t\tsetTimeout(() => {\n\t\t\t\tseterrorMessage(null)\n\t\t\t}, 3000);\n\t\t}\n\t}\n\n\tconst changeimportance = (id) => {\n        console.log('id is',id)\n\t\tconst note = notes.find(note => note.id === id)\n\t\tconst changedNote = {\n\t\t\t...note,\n\t\t\timportant: !note.important\n\t\t}\n\t\tnoteService\n\t\t.update(id, changedNote)\n\t\t.then(updatedData => {\n            console.log('now updating in frontend server has responded usually!!')\n\t\t\tsetnotes(notes.map(note => note.id === id ? updatedData : note))\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst message = `note with content \"${note.content}\" not found in our database`\n\t\t\tError(message ,seterrorMessage, setnewNote)\n\t\t})\n\t\tsetnotes(notes.filter(note => note.id !== id))\t\n\t}\n\t\t\t\t\t\t\t\n\treturn(\n\t\t<div>\n\t\t<h1>Notes</h1>\t\n\t\t<Notification message = {errorMessage} />\n\t\t<h2> \n\t\t\tlogin\n\t\t</h2>\n\t\t{user === null ? loginform(): notesform()}\n\t\t{/* <button onClick={() => setshowAll(!showAll)}>\n\t\t\tShow Important \t\n\t\t</button> */}\n\t\t<ul>\n\t\t\t{notes.map((note) => <Note note = {note, changeimportance, showAll} key = {note.id} />)}\n\t\t</ul>\n\t</div>)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}