{"version":3,"sources":["services/Note.js","App.js","index.js"],"names":["baseUrl","console","log","request","axios","get","dummy","id","content","date","Date","toISOString","important","Math","random","then","response","data","concat","newObject","post","put","Error","errorHandler","notehandler","setTimeout","App","useState","notes","setnotes","newNote","setnewNote","errorMessage","seterrorMessage","showAll","setshowAll","useEffect","noteService","initialnotes","Note","note","label","className","onClick","find","changedNote","updatedData","map","catch","error","message","filter","changeimportance","key","onSubmit","event","preventDefault","value","ans","forEach","ele","toLowerCase","duplicate","newData","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.395e9408.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nconst baseUrl = 'https://immense-dawn-65532.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    console.log('Just now sent a GET request to server')\n    const request = (axios.get(baseUrl))\n    const dummy = {\n        id: 56,\n        content: 'This data doesnt exist in the database',\n        date: new Date().toISOString(),\n        important: Math.random() > 0.5\n    }\n    console.log('fetching data from server')\n    return request.then(response => response.data.concat(dummy))\n}\n\nconst create = (newObject) => {\n    console.log(`creating new object in server at ${baseUrl}`);\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update\n}\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport noteService from './services/Note'\n\nconst duplicate = (value, data) => {\n\tconsole.log('value', value);\n\tvar ans = false\n\tdata.forEach(ele => {\n\t\tconsole.log('ele.content',ele.content)\n\t\tif(ele.content.toLowerCase() === value.toLowerCase()) {\n\t\t\tans = true\n\t\t}\n\t});\n\treturn ans\n}\n\nconst Error = (content, errorHandler, notehandler) => {\n\terrorHandler(content)\n\tnotehandler('')\n\tsetTimeout(() => {\n\t\terrorHandler(null)\n\t}, 3000);\n}\n\nconst App = () => {\n\tconst [notes, setnotes] = useState([])\n\tconst [newNote, setnewNote] = useState('')\n\tconst [errorMessage, seterrorMessage] = useState('')\n\tconst [showAll, setshowAll] = useState(true)\n\n\tconsole.log(notes)\n\t\n\tconst fetchData = () => {\n\t\tconsole.log('inside fetch Data')\n\t\tnoteService\n\t\t.getAll()\n\t\t.then(initialnotes => {\n\t\t\tconsole.log('fetcing is finaly complete ugh!!')\n\t\t\tsetnotes(initialnotes)\n\t\t})\n\t}\n\tuseEffect(fetchData, [])\n\t\n\tconst handleNoteChange = (event) => {\n\t\tconsole.log('handle note change', newNote)\n\t\tsetnewNote(event.target.value)\n\t}\n\t\n\tconst addNote = (event) => {\n\t\tevent.preventDefault()\n\t\tif (duplicate(newNote, notes)) {\n\t\t\tconst message = `note with content \"${newNote}\" is duplicate`\n\t\t\tError(message, seterrorMessage, setnewNote)\n\t\t\treturn\n\t\t}\n\t\tconst newObject = {\n\t\t\tcontent: newNote,\n\t\t\timportant: Math.random() > 0.5,\n\t\t\tdate: new Date().toISOString()\n\t\t}\n\t\tconsole.log(newObject);\n\t\tnoteService\n\t\t.create(newObject)\n\t\t.then(newData => {\n\t\t\tconsole.log('post request has been made to server')\n\t\t\tsetnotes(notes.concat(newData))\n\t\t\tsetnewNote('')\n\t\t})\n\t}\n\n\tconst Notification = ({message}) => {\n\t\treturn(\n\t\t\t<div className=\"error\">\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst changeimportance = (id) => {\n\t\tconst note = notes.find(note => note.id === id)\n\t\tconst changedNote = {\n\t\t\t...note,\n\t\t\timportant: !note.important\n\t\t}\n\t\tnoteService\n\t\t.update(id, changedNote)\n\t\t.then(updatedData => {\n\t\t\tsetnotes(notes.map(note => note.id === id ? updatedData : note))\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst message = `note with content \"${note.content}\" not found in our database`\n\t\t\tError(message ,seterrorMessage, setnewNote)\n\t\t})\n\t\tsetnotes(notes.filter(note => note.id !== id))\t\n\t}\n\n\tconst Note = ({note}) => {\n\t\tconst label = note.important ? 'make not important' : 'make important'\n\t\tif(!showAll && !note.important) return null\n\n\t\treturn(\n\t\t\t<li className=\"note\">{note.content}\n\t\t\t\t<button onClick = {() => changeimportance(note.id)}> {label} </button>\n\t\t\t</li>\n\t\t)\t\n\t}\n\t\t\t\t\t\t\t\n\treturn(\n\t\t<div>\n\t\t<h1>Fetched data</h1>\n\t\t\tshow important\n\t\t<button onClick={() => setshowAll(!showAll)}>\n\t\t\tShow Important \t\n\t\t</button>\n\t\t<ul>\n\t\t\t{notes.map((note) => <Note note = {note} key = {note.id} />)}\n\t\t</ul>\n\t\t<Notification message = {errorMessage} />\n\t\t<form onSubmit={addNote}>\n\t\t\t<h1>\n\t\t\t\tAdd new notes here!\n\t\t\t</h1>\n\t\t\t<input value={newNote} onChange={handleNoteChange} id=\"first\"/>\n\t\t\t<button type=\"submit\"> \n\t\t\t\tAdd\n\t\t\t</button>\n\t\t</form>\n\t</div>)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}