{"version":3,"sources":["components/Note.js","components/Notification.js","services/Note.js","services/Login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","token","axios","get","then","response","data","newObject","a","async","config","headers","Authorization","post","id","put","newToken","credentials","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","notesToShow","filter","handleLogin","event","preventDefault","loginService","setItem","stringify","setTimeout","handleNoteChange","target","value","addNote","noteObject","date","Date","toISOString","Math","random","length","concat","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","onSubmit","type","name","onChange","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d96ffc44.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null \n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config) \n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${ baseUrl } /${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken } ","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/Note'\nimport loginService from './services/Login'  \n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('') \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('') \n  const [user, setUser] = useState(null) \n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => setNotes(initialNotes))\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n\tusername, password,\n      })\n\n      window.localStorage.setItem(\n\t'loggedNoteappUser', JSON.stringify(user)\n      )       \n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n\tsetErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n  \n  const loginForm = () => (\n    <form onSubmit={handleLogin}>\n      <div>\n\tusername\n\t<input\n\t  type=\"text\"\n\t  value={username}\n\t  name=\"Username\"\n\t  onChange={({ target }) => setUsername(target.value)}\n\t/>\n      </div>\n      <div>\n\tpassword\n\t<input\n\t  type=\"password\"\n\t  value={password}\n\t  name=\"Password\"\n\t  onChange={({ target }) => setPassword(target.value)}\n\t/>\n      </div>\n      <button type=\"submit\">login</button>\n    </form>\n  )\n\n  const noteForm = () => (\n    <form onSubmit={addNote}>\n      <input\n\tvalue={newNote}\n\tonChange={handleNoteChange}\n      />\n      <button type=\"submit\">save</button>\n    </form>\n  )\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(data => {\n\tsetNotes(notes.concat(data))\n\tsetNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n\tsetNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n\tsetErrorMessage(\n\t  `Note '${note.content}' was already removed from server`\n\t)\n\tsetTimeout(() => {\n\t  setErrorMessage(null)\n\t}, 5000)\n\tsetNotes(notes.filter(n => n.id !== id))\n      })\n      \n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      <Notification message={errorMessage} />\n\n      {user === null ?\n\tloginForm() :\n\t<div>\n\t  <p>{user.name} logged in</p>\n\t  {noteForm()}\n\t</div>\n      }\n\n      <div>\n\t<button onClick={() => setShowAll(!showAll)}>\n\t  show {showAll ? 'important' : 'all'}\n\t</button>\n      </div>\n      <ul>\n\t{rows()}\n      </ul>\n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'  \nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}