{"version":3,"sources":["services/Note.js","services/Login.js","App.js","index.js"],"names":["console","log","request","axios","get","then","response","data","newObject","post","id","put","credentials","a","async","Error","content","errorHandler","notehandler","setTimeout","App","useState","notes","setnotes","newNote","setnewNote","errorMessage","seterrorMessage","showAll","username","setusername","password","setpassword","user","setuser","useEffect","noteService","initialnotes","handleNoteChange","event","target","value","handleusername","handlepassword","addNote","preventDefault","ans","forEach","ele","toLowerCase","duplicate","message","important","Math","random","date","Date","toISOString","newData","concat","handleLogin","loginService","Note","note","label","className","onClick","find","changedNote","updatedData","map","catch","error","filter","changeimportance","onSubmit","type","name","onChange","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7a8e49c.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    console.log('Just now sent a GET request to server')\n    const request = (axios.get(baseUrl))\n    console.log('fetching data from server')\n    return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n    console.log(`creating new object in server at ${baseUrl}`);\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    console.log('Sent the put request')\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    console.log('successfully made the put request!!')\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update\n}\n","import axios from 'axios'\nconst baseurl = '/api/login/' \n\nconst login = async credentials => {\n\tconst response =  await axios.post(baseurl, credentials)\n\treturn response.data\n} \n\nexport default { login }","import React, {useState, useEffect} from 'react'\nimport noteService from './services/Note'\nimport loginService from './services/Login'\n\nconst duplicate = (value, data) => {\n\tconsole.log('value', value);\n\tvar ans = false\n\tdata.forEach(ele => {\n            console.log('ele.content',ele.content)\n            if(ele.content.toLowerCase() === value.toLowerCase()) {\n                ans = true\n\t\t}\n\t});\n\treturn ans\n}\n\nconst Error = (content, errorHandler, notehandler) => {\n\terrorHandler(content)\n\tnotehandler('')\n\tsetTimeout(() => {\n\t\terrorHandler(null)\n\t}, 3000);\n}\n\nconst App = () => {\n\tconst [notes, setnotes] = useState([])\n\tconst [newNote, setnewNote] = useState('')\n\tconst [errorMessage, seterrorMessage] = useState('')\n\tconst [showAll, setshowAll] = useState(true)\n\tconst [username, setusername] = useState('')\n\tconst [password, setpassword] = useState('')\n\tconst [user, setuser] = useState(null)\n\t\n\tconst loginform = () => (\n\t\t<form onSubmit={handleLogin}>\n\t\t<div>\n\t\t\tusername \n\t\t\t<input \n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={username}\n\t\t\t\tname=\"username\"\n\t\t\t\tonChange={handleusername}\n\t\t\t/>\n\t\t</div>\n\t\t<div>\n\t\t\tpassword \n\t\t\t<input \n\t\t\t\ttype=\"password\" value={password} name=\"password\" onChange={handlepassword}\n\t\t\t/>\n\t\t</div>\n\t\t<button type=\"submit\"> \n\t\t\tlogin\n\t\t</button>\n\t</form>\n\t)\n\n\tconst notesform = () => (\n\t\t<div>\n\t\t\thello {user.username}\n\t\t\t<form onSubmit={addNote}>\n\t\t\t\t<h1>\n\t\t\t\t\tAdd new notes here!\n\t\t\t\t</h1>\n\t\t\t\t<input value={newNote} onChange={handleNoteChange} id=\"first\"/>\n\t\t\t\t<button type=\"submit\"> \n\t\t\t\t\tAdd\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</div>\n\t)\n\n\tconst fetchData = () => {\n\t\tconsole.log('inside fetch Data')\n\t\tnoteService\n\t\t.getAll()\n\t\t.then(initialnotes => {\n\t\t\tconsole.log('fetcing is finaly complete ugh!!')\n\t\t\tsetnotes(initialnotes)\n\t\t})\n\t}\n\tuseEffect(fetchData, [])\n\t\n\tconst handleNoteChange = (event) => {\n\t\tconsole.log('handle note change', newNote)\n\t\tsetnewNote(event.target.value)\n\t}\n\t\n\tconst handleusername = (event) => {\n\t\tconsole.log('handle username', username)\n\t\tsetusername(event.target.value)\n\t}\n\n\tconst handlepassword = (event) => {\n\t\tconsole.log('handle password',password)\n\t\tsetpassword(event.target.value)\n\t}\n\n\tconst addNote = (event) => {\n\t\tevent.preventDefault()\n\t\tif (duplicate(newNote, notes)) {\n\t\t\tconst message = `note with content \"${newNote}\" is duplicate`\n\t\t\tError(message, seterrorMessage, setnewNote)\n\t\t\treturn\n\t\t}\n\t\tconst newObject = {\n\t\t\tcontent: newNote,\n\t\t\timportant: Math.random() > 0.5,\n\t\t\tdate: new Date().toISOString()\n\t\t}\n\t\tconsole.log(newObject);\n\t\tnoteService\n\t\t.create(newObject)\n\t\t.then(newData => {\n\t\t\tconsole.log('post request has been made to server')\n\t\t\tsetnotes(notes.concat(newData))\n\t\t\tsetnewNote('')\n\t\t})\n\t}\n\n\tconst handleLogin = async (event) => {\n\t\tevent.preventDefault()\n\t\tconsole.log('started login process')\n\t\ttry {\n\t\t\tconst user = await loginService.login({username, password})\n\t\t\tsetuser(user)\n\t\t\tsetusername('')\n\t\t\tsetpassword('')\n\t\t} catch(exception) {\n\t\t\tseterrorMessage('wrong credentials!')\n\t\t\tsetTimeout(() => {\n\t\t\t\tseterrorMessage(null)\n\t\t\t}, 3000);\n\t\t}\n\t}\n\n\tconst Notification = ({message}) => {\n\t\treturn(\n\t\t\t<div className=\"error\">\n\t\t\t\t{message}\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst changeimportance = (id) => {\n        console.log('id is',id)\n\t\tconst note = notes.find(note => note.id === id)\n\t\tconst changedNote = {\n\t\t\t...note,\n\t\t\timportant: !note.important\n\t\t}\n\t\tnoteService\n\t\t.update(id, changedNote)\n\t\t.then(updatedData => {\n            console.log('now updating in frontend server has responded usually!!')\n\t\t\tsetnotes(notes.map(note => note.id === id ? updatedData : note))\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst message = `note with content \"${note.content}\" not found in our database`\n\t\t\tError(message ,seterrorMessage, setnewNote)\n\t\t})\n\t\tsetnotes(notes.filter(note => note.id !== id))\t\n\t}\n\n\tconst Note = ({note}) => {\n\t\tconst label = note.important ? 'make not important' : 'make important'\n\t\tif(!showAll && !note.important) return null\n\n\t\treturn(\n\t\t\t<li className=\"note\">{note.content}\n\t\t\t\t<button onClick = {() => changeimportance(note.id)}> {label} </button>\n\t\t\t</li>\n\t\t)\t\n\t}\n\t\t\t\t\t\t\t\n\treturn(\n\t\t<div>\n\t\t<h1>Notes</h1>\t\n\t\t<Notification message = {errorMessage} />\n\t\t<h2> \n\t\t\tlogin\n\t\t</h2>\n\t\t{user === null ? loginform(): notesform()}\n\t\t{/* <button onClick={() => setshowAll(!showAll)}>\n\t\t\tShow Important \t\n\t\t</button> */}\n\t\t<ul>\n\t\t\t{notes.map((note) => <Note note = {note} key = {note.id} />)}\n\t\t</ul>\n\t</div>)\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}